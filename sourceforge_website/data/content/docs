Section: Documentation
Content: <h3>Example Usage</h3>

    <h4>Defining a Language</h4>

    To define a language, you need to have the stats file, the vowel file and
    the consonant file. With those in hand, instantiating <span
    style="font-family:monospace">Syntagmata</span>
    will work. Assigning a <span style="font-family:monospace">Syntagmata</span>
     instance to a <span style="font-family:monospace">Language</span> class's
    <span style="font-family:monospace">language</span> attribute is pretty much
    all there is to creating a new language.
    <pre>
    from wordgen.languages import Language
    from wordgen.syntagmata import Syntagmata

    class Gaelic(Language):

        def __init__(self):
            super(Gaelic, self).__init__()
            self.language = Syntagmata('gaelic')
    </pre>

    <h4>Using a Language</h4>

    Now we can do fun stuff like creating new words, passing an integer for the
    desired syllable count:
    <pre>
    >>> lang = Gaelic()
    >>> lang.makeWord(4)
    u'gachareag'
    >>> lang.makeWord(1)
    u'rod'
    >>> lang.makeWord(7)
    u"a'eannadhlirairie"
    </pre>
    There are also some convenience functions for creating word lists:
    <ul>
    <li>a word list generator (just call <span style="font-family:monospace">next</span> on it)</li>
    <li>a method for retruning a word list (slice of the python geneator above)</li>
    <li>printing a word list</li>
    <li>saving a word list to disk</li>
    </ul>
    Here's the generator in action:
    <pre>
    >>> wl = lang.wordList()
    >>> wl.next()
    u'eilththarathrodaichase'
    >>> wl.next()
    u'saen'
    >>> wl.next()
    u'anne'
    >>> wl.next()
    u'anntealtrainear'
    >>> wl.next()
    u'masteathealeadalich'
    </pre>
    With any of those methods, you can pass a <span
    style="font-family:monospace">maxSyllables</span> parameter that will limit
    how long the words in the llist will be (the number of syllables for each
    generated word is determined randomly for the word list methods).

    The last three methods take an additional <span
    style="font-family:monospace">count</span> parameter limiting the number of
    words to return.

    <h4>Supported Languages</h4>

    To get a list of languages currently supported, you can do the following:
    <pre>
    >>> from wordgen.languages import printSupportedLanguages
    >>> printSupportedLanguages()
    Afrikaner
    Arabic
    Chinese
    English
    French
    Gaelic
    German
    Hebrew
    Hindi
    Japanese
    Korean
    Latin
    OldEnglish
    OldNorse
    Onomatopoetic
    Sanskrit
    Spanish
    </pre>

    <h4>Creating a Composite Language</h4>
    Creating composite languages is just plain fun. There are probably all
    sorts of reasons to do this, but for the authors of this software, the one
    it was designed for and is used for most of the time is creating fictional
    worlds. You can often get just the "sound" you're looking for by combining
    different languages in different ratios.

    Here's how it works:
    <pre>
    >>> from wordgen.languages import Composite
    >>> from wordgen.languages import Sanskrit, Korean, French
    >>> c = Composite()
    >>> c.addLanguage(Sanskrit, 5)
    >>> c.addLanguage(Korean 2)
    </pre>
    If we're going to be doing a lot of combination, it could be helpful to see
    what the current composition of our new language is:
    <pre>    
    >>> c.report()
    sanskrit: 5 parts (71%)
    korean: 2 parts (28%)
    </pre>
    Let's add another one and then check the ratios again:
    <pre>
    >>> c.addLanguage(French, 3)
    >>> c.report()
    sanskrit: 5 parts (50%)
    korean: 2 parts (20%)
    french: 3 parts (30%)
    </pre>
    Now, let's take a look at what we've just created:
    <pre>
    >>> c.printWordList()
    bhalathae
    bodayadskis
    elmjnaanam
    estmpte
    etxapa
    fonalatol
    jeims
    kaaaantdasapaahi
    leine
    lemakabaaptan
    meksharetim
    motyuskaalahnaalam
    nangjuvyaadhyanchakaatre
    neh
    ninnals
    pouncha
    san
    shie
    traisondima
    trayint
    </pre>

    <h4>Dessert</h4>

    If you want to see a sampling of all languages, you can do something like
    this:
    <pre>
    >>> for name in languages.getSupportedLanguages():
    ...   print name
    ...   words = getattr(languages, name)().getWordList(3,4)
    ...   for w in words:
    ...     print w,
    ...   print
    </pre>
    Which will give you something along these lines:
    <pre>
    Afrikaner
    disans ngees taam
    Arabic
    alddn suu warau
    Chinese
    xian juanggoun nungzhain
    English
    ins logs paidittos
    French
    deuigigt leroies oumers
    Gaelic
    airsch annn rilbh
    German
    geckebjell lepiwe wich
    Hebrew
    klhl kzbyhrn vxkmal
    Hindi
    paya rapnarao sadbhasya
    Japanese
    taeshi tanaishi tosagyonko
    Korean
    ayng gwammyam junsu
    Latin
    deorr expnum intm
    OldEnglish
    cypeneed gen wætoloor
    OldNorse
    föðingu keguggði okngleitssi
    Onomatopoetic
    boot mune weechazzle
    Sanskrit
    chagashhtaa syan yogh
    Spanish
    els poial suntemano
    </pre>
